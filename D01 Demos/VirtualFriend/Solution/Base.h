/*--------------------------------------------------------------------------------------------------
This Program was generated by Alberto Bobadilla in 2013
--------------------------------------------------------------------------------------------------*/
#ifndef _Base_H
#define _Base_H

#include <cstring>
#include <iostream>
 
class Base
{
public:
    /** Constructor */
    Base() :
        data (1)
    {
		//std::cout << __FUNCTION__ << std::endl;
    }
 
    /** Copy Constructor */
    Base (const Base& other)
    {
		//std::cout << __FUNCTION__ << std::endl;
		data = other.data;
    }

	/** Copy Assignment Operator */
    Base& operator= (const Base& other)
    {
		//std::cout << __FUNCTION__ << std::endl;
        Base temporary (other);
        std::swap (data, temporary.data);
        return *this;
    }
 
    /** Destructor */
    ~Base()
    {
		//std::cout << __FUNCTION__ << std::endl;
    }
	void print()
	{
		std::cout << "From Base : print" << std::endl;
	}
	virtual void virtualPrint()
	{
		std::cout << "From Base : virtualPrint" << std::endl;
	}
	/**Friend*/
	friend void f(Base& other)
	{
		//std::cout << __FUNCTION__ << std::endl;
		std::cout << "From Base : f (friend)" << std::endl;
	}

	/**Virtual Friend Idiom*/
	friend void g(Base& other);

protected:
	virtual void do_function()
	{
		//std::cout << __FUNCTION__ << std::endl;
		std::cout << "From Base : g (\"virtual friend\")" << std::endl;
	}
 
protected:

    int data;
};

inline void g(Base& other)
{
	//std::cout << __FUNCTION__ << std::endl;
	other.do_function();
}
#endif //_Base_H