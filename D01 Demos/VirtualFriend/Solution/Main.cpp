/*--------------------------------------------------------------------------------------------------
This Program was generated by Alberto Bobadilla in 2013
It tries to explain the use of Virtual Friend Idiom
--------------------------------------------------------------------------------------------------*/
#include "Base.h"
#include "Derived.h"

int main()
{
	//For Variables
	Base b;
	std::cout << "<<<<<Non Pointers>>>>>\n";
	std::cout << "For Base object:\n";
	b.print();
	b.virtualPrint();
	f(b);
	g(b);

	Derived d;
	std::cout << std::endl;
	std::cout << "For Derived object:\n";
	d.print();
	d.virtualPrint();
	f(d);
	g(d);

	//For Pointers
	Base* pB = new Base();
	std::cout << "\n\n<<<<<Pointers>>>>>\n";
	std::cout << "For pB (pointer to Base):\n";
	pB->print();
	pB->virtualPrint();
	f(*pB);
	g(*pB);
	delete pB;

	Derived* pD = new Derived();
	std::cout << std::endl;
	std::cout << "For bD (pointer to Derived):\n";
	pD->print();
	pD->virtualPrint();
	f(*pD);
	g(*pD);
	delete pD;


	//For Polimorfic objects
	Base* pB_D = new Derived();
	std::cout << "\n\n<<<<<Polimorfic Objects>>>>>\n";
	std::cout << "For pB_D (pointer to Base constructed from Derived):\n";
	pB_D->print();
	pB_D->virtualPrint();
	f(*pB_D);
	g(*pB_D);
	delete pB_D;

	//Ending the program
	std::cout << "\nPress enter to finish";
	getchar();
	return 0;
}